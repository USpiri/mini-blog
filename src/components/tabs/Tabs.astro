---
import { processPanels } from "./rehype-tabs";

const panelHtml = await Astro.slots.render("default");
const { html, panels } = processPanels(panelHtml);
---

<astro-tabs>
  {
    panels && (
      <div class="tablist-wrapper not-content not-prose">
        <ul role="tablist">
          {
            //@ts-ignore
            panels.map(({ label, panelId, tabId }, idx) => (
              <li role="presentation" class="tab">
                <a
                  role="tab"
                  href={"#" + panelId}
                  id={tabId}
                  aria-selected={idx === 0 && "true"}
                  tabindex={idx !== 0 ? -1 : 0}
                >
                  {label}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    )
  }
  <Fragment set:html={html} />
</astro-tabs>

<style lang="scss">
  astro-tabs {
    display: block;
    @apply border dark:border-neutral-700 bg-transparent px-3 rounded-lg;
  }

  .tablist-wrapper {
    overflow-x: auto;
  }

  [role="tablist"] {
    @apply border-b-2 border-neutral-300 dark:border-neutral-700 flex;
  }
  .tab > [role="tab"] {
    @apply px-2 py-3 block border-b-2 transition-all duration-100 border-neutral-300 dark:border-neutral-600;
  }
  .tab [role="tab"][aria-selected] {
    @apply font-semibold border-b-2 border-cyan-500;
  }

  // .tab{}
  // .tablist-wrapper ~ :global([role="tabpanel"]) {}
</style>

<script>
  class Tabs extends HTMLElement {
    tabs: HTMLAnchorElement[];
    panels: HTMLElement[];

    constructor() {
      super();
      const tablist = this.querySelector<HTMLUListElement>('[role="tablist"]')!;
      this.tabs = [
        ...tablist.querySelectorAll<HTMLAnchorElement>('[role="tab"]'),
      ];
      this.panels = [
        ...this.querySelectorAll<HTMLElement>(':scope > [role="tabpanel"]'),
      ];

      this.tabs.forEach((tab, i) => {
        // Handle clicks for mouse users
        tab.addEventListener("click", (e) => {
          e.preventDefault();
          const currentTab = tablist.querySelector("[aria-selected]");
          if (e.currentTarget !== currentTab) {
            this.switchTab(e.currentTarget as HTMLAnchorElement, i);
          }
        });

        // Handle keyboard input
        tab.addEventListener("keydown", (e) => {
          const index = this.tabs.indexOf(e.currentTarget as any);
          // Work out which key the user is pressing and
          // Calculate the new tab's index where appropriate
          const nextIndex =
            e.key === "ArrowLeft"
              ? index - 1
              : e.key === "ArrowRight"
              ? index + 1
              : e.key === "Home"
              ? 0
              : e.key === "End"
              ? this.tabs.length - 1
              : null;
          if (nextIndex === null) return;
          if (this.tabs[nextIndex]) {
            e.preventDefault();
            this.switchTab(this.tabs[nextIndex], nextIndex);
          }
        });
      });
    }

    switchTab(newTab: HTMLAnchorElement | null | undefined, index: number) {
      if (!newTab) return;

      // Mark all tabs as unselected and hide all tab panels.
      this.tabs.forEach((tab) => {
        tab.removeAttribute("aria-selected");
        tab.setAttribute("tabindex", "-1");
      });
      this.panels.forEach((oldPanel) => {
        oldPanel.hidden = true;
      });

      // Show new panel and mark new tab as selected.
      const newPanel = this.panels[index];
      if (newPanel) newPanel.hidden = false;
      // Restore active tab to the default tab order.
      newTab.removeAttribute("tabindex");
      newTab.setAttribute("aria-selected", "true");
      newTab.focus();
    }
  }

  customElements.define("astro-tabs", Tabs);
</script>
